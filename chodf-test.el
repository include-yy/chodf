;; -*- lexical-binding: t; -*-

(require 'ert)

(ert-deftest chodf-basic-t ()
  (should (= (chodf-ok 1) 1))
  (should (= (chodf-ok 2) 2))
  (should (eq (chodf-ok t) t))
  (should-error (chodf-ng 1 :type '(chodf-error)))
  (should (equal '(chodf-error . 3)
		 (condition-case err
		     (chodf-ng 3)
		   (chodf-error err)))))

(ert-deftest chodf-struct-t ()
  (let ((ds (chodf-new :okcb 1 :ngcb 2 :n 3)))
    (should (= (chodf-okcb ds) 1))
    (should (= (chodf-ngcb ds) 2))
    (should (= (chodf-n ds) 3))
    (chodf--post ds :ok 1)
    (should (= (chodf-okcb (chodf-n ds)) 1))
    (chodf--post ds :ng 2)
    (should (= (chodf-ngcb (chodf-n ds)) 2))
    (chodf-next ds 3)
    (should (= (chodf-okcb (chodf-n ds)) 3))
    (chodf-error ds 4)
    (should (= (chodf-ngcb (chodf-n ds)) 4))
    (chodf-ner ds 5 6)
    (should (and (= (chodf-okcb (chodf-n ds)) 5)
		 (= (chodf-ngcb (chodf-n ds)) 6)))))

(ert-deftest chodf-fire-t ()
  (let ((f (lambda (n)
	     (let ((d (chodf-new)))
	       (run-at-time 0.05 nil
			    (lambda ()
			      (chodf-call d (1+ n))))
	       d)))
	(g (lambda (n)
	     (let ((d (chodf-new)))
	       (run-at-time 0.05 nil
			    (lambda ()
			      (chodf-fail d (1+ n))))
	       d))))
    (let ((d (chodf-new))
	  (val 0))
      (setf (chodf-okcb d) (lambda (x) (setq val (1+ x))))
      (should (= (progn (chodf--fire d :ok 1) val) 2))
      (let ((it d))
	(setq it (chodf-next it (lambda (x) (setq val (+ x 2)))))
	(should (= (progn (chodf--fire d :ok 1) val) 4))
	(setq it (chodf-next it (lambda (x) (chodf-ng (1- x)))))
	(setq it (chodf-error it (lambda (x) (error "%s" x))))
	(should (string= (cadr (should-error (chodf--fire d :ok 1) :type '(error))) "3"))
	(should (string= (cadr (should-error (chodf--fire d :ng 1) :type '(error))) "1"))
	(should-error (chodf--fire d :hello 1))))

    (let ((it (chodf-nextx (lambda (_) (1+ 1)))))
      (setq it (chodf-next it '1+))
      (setq it (chodf-next it '1+))
      (should (= (chodf-sync! it) 4)))

    (let ((it (chodf-nextx (lambda (_) (funcall f 1)))))
      (setq it (chodf-next it f))
      (setq it (chodf-next it (lambda (x) (* x 2))))
      (should (= (chodf-sync! it) 6)))

    (let ((it (chodf-callx f 1)))
      (should (= (chodf-sync! it) 2)))

    (let ((it (chodf-callx g 1)))
      (should-error (chodf-sync! it) :type '(chodf-error)))))

(ert-deftest chodf-wait-t ()
  (let ((it (chodf-wait 0.5)))
    (should (< (abs (- (chodf-sync! it) 0.5)) 0.1))))

(ert-deftest chodf-parallel-t ()
  (let ((f (lambda (n)
	     (let ((d (chodf-new)))
	       (run-at-time 0.05 nil
			    (lambda ()
			      (chodf-call d (1+ n))))
	       d))))
    (let ((it (chodf-parallel
	       (funcall f 1)
	       (funcall f 2)
	       (funcall f 3)
	       (funcall f 4))))
      (should (let ((res (chodf-sync! it)))
		(and (= 2 (aref res 0))
		     (= 3 (aref res 1))
		     (= 4 (aref res 2))
		     (= 5 (aref res 3))))))))

(ert-deftest chodf-chain-t ()
  (let ((f (lambda (n)
	     (let ((d (chodf-new)))
	       (run-at-time 0.05 nil
			    (lambda ()
			      (chodf-call d (1+ n))))
	       d)))
	(g (lambda (n)
	     (let ((d (chodf-new)))
	       (run-at-time 0.05 nil
			    (lambda ()
			      (chodf-fail d (1+ n))))
	       d))))
    (let ((it (chodf-chain (lambda (_) (funcall f 1)) f f f f)))
      (should (= (chodf-sync! it) 6)))
    (let ((it (chodf-chain (lambda (_) (funcall f 1)) g f f f)))
      (should (= 3 (cdr (should-error (chodf-sync! it) :type '(chodf-error))))))
    (let ((it (chodf-chain (lambda (_) (funcall f 1))
			   g :err (lambda (x) (chodf-ng (- x 2)))
			   f f f)))
      (should (= 1 (cdr (should-error (chodf-sync! it) :type '(chodf-error))))))
    (let ((it (chodf-chain (lambda (_) (funcall f 1))
			   g :err (lambda (x) (chodf-ng (- x 2)))
			   :err (lambda (x) (+ x 2))
			   f f f)))
      (should (= (chodf-sync! it) 6)))))

(ert-deftest chodf-earlier-t ()
  (let ((makef (lambda (time)
		 (lambda (n)
		   (let ((d (chodf-new)))
		     (run-at-time time nil
				  (lambda ()
				    (chodf-call d (1+ n))))
		     d))))
	(g (lambda (n)
	     (let ((d (chodf-new)))
	       (run-at-time 0 nil
			    (lambda ()
			      (chodf-fail d (1+ n))))
	       d))))
    (let ((f1 (funcall makef 0.01))
	  (f2 (funcall makef 0.02))
	  (f3 (funcall makef 0.03)))
      (let ((it (chodf-earlier (funcall f1 1)
			       (funcall f2 2)
			       (funcall f3 3))))
	(should (equal '(0 . 2) (chodf-sync! it))))
      (let ((it (chodf-earlier (funcall f2 5)
			       (funcall f1 4)
			       (funcall f3 6))))
	(should (equal '(1 . 5) (chodf-sync! it))))
      (let ((it (chodf-earlier (funcall f1 0)
			       (funcall f2 1)
			       (funcall f3 2)
			       (funcall g  4))))
	(should (= (cdr (should-error (chodf-sync! it)
				      :type '(chodf-error)))
		   5))))))
